target-audience
relevant-resources
why-wdl
wdl-pros
wdl-cons
curriculum
introduction-to-wdl
introduction
review-of-basic-wdl-syntax
using-jsons-to-control-workflow-inputs
running-wdl-via-a-computing-engine
installing-docker
installing-miniwdl
launching-a-workflow-locally-with-miniwdl
troubleshooting
dockerexception
missing-required-inputs
check-json-input
defining-a-workflow-plan
somatic-mutation-calling-workflow
workflow-testing-strategy
test-samples
tumor-1-hcc4006
tumor-2-calu1
normal-molm13
test-data-details
access-to-files
the-first-task
inputs
referencing-inputs-in-the-command-section
file-localization
private-variables
runtime-attributes
docker-images-and-containers
outputs
the-whole-task
putting-the-workflow-together
testing-your-first-task
connecting-multiple-tasks-together-in-a-linear-chain
how-to-connect-tasks-together-in-a-workflow
writing-markduplicates-task
input
private-variables-in-the-task
command
runtime-and-output
testing-the-workflow
the-rest-of-the-linear-chain-workflow
organizing-variables-via-structs
parallelization-via-arrays
the-array-type
scattered-tasks
troubleshooting-1
making-our-workflow-run-on-multiple-samples-at-once-using-scattered-tasks-and-arrays
referencing-an-array-in-a-task
the-workflow-so-far
task-aliasing
aliasing-your-first-task
aliasing-other-tasks
paired-tumor-normal-calling
optional-types
optional-inputs
optional-outputs
declaring-a-tasks-output-to-be-optional
making-an-entire-task-optional
the-final-workflow
optimization
common-optimizingparallelizing-methods
memory-optimization
embarrassingly-parallel-scatter-gather
multithreading-shared-memory-parallelism
multiprocessing-distributed-memory-parallelism
graphical-processing-units-gpus
scatter-gather-on-chromosomes
appendix-backends-and-executors
commonly-used-runtime-attributes
general-advice
executor-specific-notes
cromwell
miniwdl
backend-specific-notes
hpcs
fred-hutch-hpc
gcpterra
preemptibles
disk-space
references
